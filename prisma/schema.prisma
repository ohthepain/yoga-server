// generated by concatenate-schemas.js
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// Uncomment the stuff above if you want to highlight errors

enum ConfigStatus {
    CREATED
    WAITING
    BUILDING
    DONE
}

model Project {
    id           String        @id @default(uuid())
    name         String        @unique
    // configs   Config[]
    branches     Branch[]
    gitRepo      String?       @db.VarChar(1024)
    bucket       String?       @db.VarChar(1024)
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    environments Environment[]
}

model Branch {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // name      String   @db.VarChar(255)
    gitBranch String?  @db.VarChar(255)
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    configs   Config[]

    @@unique([projectId, gitBranch])
}

model Config {
    id           Int           @id @unique @default(autoincrement())
    status       ConfigStatus  @default(CREATED)
    projectId    String
    branch       Branch        @relation(fields: [branchId], references: [id], onDelete: Cascade)
    branchId     String
    environments Environment[]
    userId       String
    user         User          @relation(fields: [userId], references: [id])
    notes        String?       @db.VarChar(1024)
    gitHash      String        @db.VarChar(255)
    downloadUrl  String?       @db.VarChar(1024)
    checksumMd5  String?       @db.VarChar(255)
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

model Environment {
    id                   String   @id @default(uuid())
    name                 String   @unique
    projectId            String
    project              Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    configId             Int?
    config               Config?  @relation(fields: [configId], references: [id])
    claimedByUserId      String?
    claimedByUser        User?    @relation(fields: [claimedByUserId], references: [id])
    globalTimeTravel     Int
    notificationUrl      String   @db.VarChar(1024)
    uploadLocation       String   @db.VarChar(1024)
    downloadUrl          String   @db.VarChar(1024)
    awsRegion            String?  @db.VarChar(128)  @default("eu-central-1")
    clientDownloadBucket String   @db.VarChar(1024)
    clientDownloadKey    String   @db.VarChar(1024)
    warningMessage       String?  @db.VarChar(1024)
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
}

model User {
    id           String        @id @default(uuid())
    password     String
    email        String        @unique
    environments Environment[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    roles        UserRole[]
    configs      Config[]
}

model Role {
    name  String     @id
    users UserRole[]
}

model UserRole {
    userId String
    roleId String

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    role Role @relation(fields: [roleId], references: [name])

    @@id([userId, roleId])
}


// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// Uncomment the stuff above if you want to highlight errors

model YogaUser {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  yogaSessions YogaSession[]
  installs     Install[]
}

model YogaSession {
    id           String        @id @default(uuid())
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    sessionId    String
    yogaUserId   String
    yogaUser YogaUser @relation(fields: [yogaUserId], references: [id], onDelete: Cascade)
}

model Device {
    id           String        @id
    installs     Install[]
}

model Install {
    id           String        @id @default(uuid())
    yogaUserId   String
    deviceId     String
    device       Device        @relation(fields: [deviceId], references: [id])
    yogaUser     YogaUser      @relation(fields: [yogaUserId], references: [id])
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

